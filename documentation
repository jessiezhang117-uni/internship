mujoco controller
class MJ_Controller:
1. path
2. model
3. sim
4. viewer
5. create_lists() ->groups
6. create_group()
7. actuated_joint_ids
8. reached_target
9. current_output
10. image_counter
11. ee_chain
12. cam_matrix
13. cam_init
14. last_movement_steps

method:
1. create_lists():
	controller_list
	sample_time = 0.0001
	p_scale
	i_scale
	i_gripper
	d_scale
	
Joint ID: 0, Joint Name:base_joint, Limits:[0.     3.1416]
Joint ID: 1, Joint Name:shoulder_joint, Limits:[0.2618 2.8798]
Joint ID: 2, Joint Name:elbow_joint, Limits:[0.     3.1416]
Joint ID: 3, Joint Name:wrist_pitch_joint, Limits:[0.     3.1416]
Joint ID: 4, Joint Name:wrist_roll_joint, Limits:[0.     3.1416]
Joint ID: 5, Joint Name:gripper_joint, Limits:[0.175  1.2741]
Joint ID: 6, Joint Name:sub_gripper_joint, Limits:[1.2741 2.3732]


object position: 0.01 0.28 0


Number of Actuators: 7

  - actuators: 2D list, each entry represents one actuator and contains:
            0 actuator ID
            1 actuator name
            2 joint ID of the joint controlled by this actuator
            3 joint name
            4 controller for controlling the actuator
2. create_group(name,idx_list)
	create custom objects for controlling groups of joints
3. actuate_joint_group(group,motor_values)
4. move_group_to_joint_target(group,target,tolerence,max_steps,plot,marker,render,quiet)
	group: specifying the group to move
	target: list of target joint vlaues
	
braccio_arm:
1. timestep
2. maxvelocity
3. maxforce
4. fingerAforce
5. fingerBforce
6. useINverseKInematics
7. useSimulation
8. useOrientation
9. useNullspace
10. endeffectorindex
11. gripperindex
12. fingerindexl
13. fingerindexr




MJ_controller:
	groups:
		arm
		gripper
	actuated_joint_ids
	current_output
	actutaors:
		0 acuator ID
		1 actuator name
		2 joint ID of the joint controller by this actuator
		3 joint name
		4 controller for controlling the actuator
- create_group()
- show_model_info()
- create_lists():
	controller_list
	current_target_joint_values
- actuate_joint_group()
- move_group_to_joint_target():
	current_joint_values = sim.data.qpos[actuated_joint_ids]
- set_group_joint_target()
- open_gripper()
- close_gripper()
- grasp()
- move_ee(ee_position):  #ee_position: list of XYZ-coordinates of the end-effector
	joint_angles
- ik(ee_position):
	current_carthesian_target
	ee_position_base
	gripper_center_position
	joint_angles
- stay()
- fill_plot_list()
- create_joint_angle_plot()


GraspEnv:
- __repr__()
- step():
	
	
